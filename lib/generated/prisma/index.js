
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/client.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}




  const path = require('path')

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  password: 'password',
  createdAt: 'createdAt',
  Balance: 'Balance'
};

exports.Prisma.RefreshTokensScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  token: 'token',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.OrderbookHistoryScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  price: 'price',
  quantity: 'quantity',
  itemId: 'itemId'
};

exports.Prisma.ItemsScalarFieldEnum = {
  id: 'id',
  heading: 'heading',
  text: 'text',
  imageUri: 'imageUri'
};

exports.Prisma.HoldingsScalarFieldEnum = {
  userName: 'userName',
  itemId: 'itemId',
  quantity: 'quantity',
  itemSupporting: 'itemSupporting'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Users: 'Users',
  RefreshTokens: 'RefreshTokens',
  OrderbookHistory: 'OrderbookHistory',
  Items: 'Items',
  Holdings: 'Holdings'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/piyush/Projects/satta-app/lib/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters",
      "queryCompiler"
    ],
    "sourceFilePath": "/home/piyush/Projects/satta-app/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.11.1",
  "engineVersion": "f40f79ec31188888a2e33acda0ecc8fd10a853a9",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\" // or `prisma-client`\n  previewFeatures = [\"queryCompiler\", \"driverAdapters\"]\n  output          = \"../lib/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Users {\n  id            Int                @id @default(autoincrement())\n  name          String             @unique\n  password      String\n  createdAt     DateTime           @default(now())\n  Balance       Int\n  holdings      Holdings[]\n  orders        OrderbookHistory[]\n  refreshtokens RefreshTokens[]\n}\n\nmodel RefreshTokens {\n  id        Int      @id @default(autoincrement())\n  userName  String\n  token     String   @unique\n  userAgent String?\n  ipAddress String?\n  createdAt DateTime @default(now())\n  expiresAt DateTime\n  user      Users    @relation(fields: [userName], references: [name], onDelete: Cascade)\n}\n\nmodel OrderbookHistory {\n  id       Int    @id @default(autoincrement())\n  userName String\n  price    Int\n  quantity Int\n  itemId   Int\n  item     Items  @relation(fields: [itemId], references: [id])\n  user     Users  @relation(fields: [userName], references: [name], onDelete: Cascade)\n}\n\nmodel Items {\n  id       Int                @id @unique @default(autoincrement())\n  heading  String\n  text     String?\n  imageUri String\n  holdings Holdings[]\n  orders   OrderbookHistory[]\n}\n\nmodel Holdings {\n  userName       String\n  itemId         Int\n  quantity       Int\n  itemSupporting String\n  item           Items  @relation(fields: [itemId], references: [id])\n  user           Users  @relation(fields: [userName], references: [name])\n\n  @@id([userName, itemId])\n}\n",
  "inlineSchemaHash": "0b0302197281ff1cc0c9e504481a9817ac742743b797d7f681284701145c9820",
  "copyEngine": true
}

const fs = require('fs')

config.dirname = __dirname
if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
  const alternativePaths = [
    "lib/generated/prisma",
    "generated/prisma",
  ]
  
  const alternativePath = alternativePaths.find((altPath) => {
    return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'))
  }) ?? alternativePaths[0]

  config.dirname = path.join(process.cwd(), alternativePath)
  config.isBundled = true
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Users\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Balance\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"holdings\",\"kind\":\"object\",\"type\":\"Holdings\",\"relationName\":\"HoldingsToUsers\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"OrderbookHistory\",\"relationName\":\"OrderbookHistoryToUsers\"},{\"name\":\"refreshtokens\",\"kind\":\"object\",\"type\":\"RefreshTokens\",\"relationName\":\"RefreshTokensToUsers\"}],\"dbName\":null},\"RefreshTokens\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"RefreshTokensToUsers\"}],\"dbName\":null},\"OrderbookHistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Items\",\"relationName\":\"ItemsToOrderbookHistory\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"OrderbookHistoryToUsers\"}],\"dbName\":null},\"Items\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"heading\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUri\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"holdings\",\"kind\":\"object\",\"type\":\"Holdings\",\"relationName\":\"HoldingsToItems\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"OrderbookHistory\",\"relationName\":\"ItemsToOrderbookHistory\"}],\"dbName\":null},\"Holdings\":{\"fields\":[{\"name\":\"userName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"itemSupporting\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Items\",\"relationName\":\"HoldingsToItems\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"HoldingsToUsers\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = {
      getRuntime: async () => require('./query_compiler_bg.js'),
      getQueryCompilerWasmModule: async () => {
        const queryCompilerWasmFilePath = require('path').join(config.dirname, 'query_compiler_bg.wasm')
        const queryCompilerWasmFileBytes = require('fs').readFileSync(queryCompilerWasmFilePath)

        return new WebAssembly.Module(queryCompilerWasmFileBytes)
      }
    }


const { warnEnvConflicts } = require('./runtime/client.js')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)
})

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

// file annotations for bundling tools to include these files
path.join(__dirname, "schema.prisma");
path.join(process.cwd(), "lib/generated/prisma/schema.prisma")
